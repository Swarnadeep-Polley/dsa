/*
Given an array of size n and a range [a, b]. The task is to partition the array around the range such that array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.
Example 1:
  Input: 
  n = 5
  A[] = {1, 2, 3, 3, 4}
  [a, b] = [1, 2]
  Output: 1
  Explanation: One possible arrangement is:
  {1, 2, 3, 3, 4}. If you return a valid
  arrangement, output will be 1.
Example 2:
  Input: 
  n = 3 
  A[] = {1, 4, 3, 6, 2, 1}
  [a, b] = [1, 3]
  Output: 1
  Explanation: One possible arrangement 
  is: {1, 3, 2, 1, 4, 6}. If you return a valid
  arrangement, output will be 1.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <= 106
1 <= A[i] <= 106
*/

import java.util.*;
public class Main
{
    public static void swap(int array[],int x, int y)
    {
        int temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }
    
    public static void threeWayPartition(int array[], int a, int b)
    {
        int l=0, r=array.length-1;
        
        for(int i=0;i<=r;i++)
        {
            if(array[i]>b)
            {
                swap(array,i,r);
                r--;
                i--;
            }
            else if(array[i]<a)
            {
                swap(array,i,l);
                l++;
            }
        }
    }
    
	public static void main(String[] args) 
	{
	    int array[] = {1, 4, 3, 6, 2, 1}, a=1, b=2;
	    threeWayPartition(array,a,b);
	    System.out.println("Output : "+ Arrays.toString(array));
	}
}
