/*
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.
Example 1:
  Input: nums = [1,3,5,6], target = 5
  Output: 2
Example 2:
  Input: nums = [1,3,5,6], target = 2
  Output: 1
*/

public class Main
{
    public static int searchInsert(int[] nums, int target) 
    {

        /*
        int ind=-1;

        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                ind = i;
            }
        }
    
        if(ind == -1)
        {
            for(int i=0;i<nums.length;i++)
            {
                if(nums[i]>=target)
                {
                    ind = i;
                    break;
                }
                else
                {
                    ind = nums.length;
                }
            }
        }
        return ind;
        */

        /*
        int N=nums.length,ans=0;
        for(int i=0;i<N;i++)
        {   
            if(nums[i]==target)
            {
                ans=i;
            }
            else if(nums[i]<target)
            {
                ans=i+1;
            }
        }
        return ans;
        */

        int l=0, h=nums.length-1, mid;
        while(l<=h)
        {
            mid = l + (h-l)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]>target) h=mid-1;
            else l = mid+1;
        }
        return l;
    }

	public static void main(String[] args) 
	{
		int arr[]={1,3,5,6},target=2;
		
		System.out.println("Output : "+searchInsert(arr,target));
	}
}


/*
NOTES:
Here is the reason:
In binary search, we repeatedly divide the search interval in half until we find the desired element. To do this, we need to calculate the midpoint of the interval.
There are two common ways to calculate the midpoint in binary search:

mid = (n + i) / 2
mid = i + (n - i) / 2

The first method calculates the midpoint by adding the lower and upper bounds of the interval and then dividing by two. The second method calculates the midpoint by adding the lower bound to half the length of the interval.
The second method, mid = i + (n - i) / 2, is considered faster and more accurate than the first method, mid = (n + i) / 2, because it reduces the risk of integer overflow.
Integer overflow occurs when the result of an arithmetic operation exceeds the range of representable values for the data type. In Java, the range of integer values is -2^31 to 2^31-1 for the int data type. If the sum of i and n exceeds this range, the result will be incorrect, leading to a bug in our code.
The second method, mid = i + (n - i) / 2, avoids this problem by computing the difference between n and i first, which is always less than or equal to n. Then, we add this difference to i, which is guaranteed to be less than or equal to 2^31-1, ensuring that the result is always within the range of representable values.
Therefore, using the second method to calculate the midpoint is considered faster and more accurate than the first method, especially when working with large values of i and n that are close to the upper bound of the int data type.
*/
