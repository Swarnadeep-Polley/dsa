/*
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.
Example 1:
  Input: arr = [1,2,2,1,1,3]
  Output: true
  Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:
  Input: arr = [1,2]
  Output: false
*/

public class Main
{
    public static boolean uniqueOccurrences(int arr[]) 
    {
        /*
        int countArr[] = new int[2001];
        for(int i : arr)
        {
            countArr[i+1000]++;
        }
        Arrays.sort(countArr);
        for(int i=0;i<2000;i++)
        {
            if(countArr[i]!=0 && countArr[i]==countArr[i+1])
            {
                return false;
            }
        }
        return true;
        */

       /* HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i:arr)
        {
            hm.put(i,hm.getOrDefault(i,0)+1);
        }
        HashSet hs = new HashSet();
        for(int i:hm.values())
        {
            if(hs.contains(i))
            {
                return false;
            }
            else
            {
                hs.add(i);
            }
        }
        return true;
        */


        int[] freq = new int[2001];
        boolean[] seen = new boolean[1001];
        
        for (int num : arr) 
        {
            freq[num + 1000]++;
        }
        
        for (int num : arr) 
        {
            int f = freq[num + 1000];
            if (f == 0) {
                continue;
            }

            freq[num + 1000] = 0;

            if (seen[f]) {
                return false;
            }

            seen[f] = true;
        }
        return true;
    }
	public static void main(String[] args) 
	{
	    int arr[]={-3,0,1,-3,1,1,1,-3,10,0};
	    System.out.println("Output : "+uniqueOccurrences(arr));
	}
}
