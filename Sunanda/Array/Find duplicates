/*
You are given an array ‘ARR’ of size ‘N’ containing each number between 1 and ‘N’ - 1 at least once. There is a single integer value that is present in the array twice. Your task is to find the duplicate integer value present in the array.
For example:
Consider ARR = [1, 2, 3, 4, 4], the duplicate integer value present in the array is 4. Hence, the answer is 4 in this case.
*/


import java.util.*;

public class Main {

        public static int findDuplicate(ArrayList<Integer> arr) {
           /*
           int ans = 0;
            for (int i = 0; i < arr.size(); i++) {
                ans ^= arr.get(i);
            }

            for (int i = 1; i < arr.size(); i++) {
                ans ^= i;
            }
            return ans;
            */
            
            /*
            int n = arr.size();
		    int sum1 = n*(n-1)/2, sum2 = 0;
		    for(int i = 0;i<n;i++)
		    {
			    sum2 += arr.get(i);
		    }
		    return sum2 - sum1;
		    */
		    
		    /*
		    Set<Integer> hs = new HashSet<>();

            for (int num : arr) 
            {
                if (!hs.add(num)) 
                {
                return num; // Found a duplicate
                }
            }

            return -1;
        */
        
        Collections.sort(arr);

        for (int i = 0; i < arr.size() - 1; i++) {
            if(arr.get(i).equals(arr.get(i+1))){
                return arr.get(i);
            }
		
		return -1;
        }
    }

    public static void main(String[] args) {
        ArrayList<Integer> arrList = new ArrayList<>();
        Collections.addAll(arrList,6,3,1,5,4,3,2);

        System.out.println("Output : " + Solution.findDuplicate(arrList));
    }
}
