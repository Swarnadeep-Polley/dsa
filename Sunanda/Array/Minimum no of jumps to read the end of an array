/*
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

Example 1:
  Input: nums = [2,3,1,1,4]
  Output: 2
  Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:
  Input: nums = [2,3,0,1,4]
  Output: 2
Constraints:
1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].
*/
public class Main
{
    public static int jump(int[] nums) 
    {
        /*
        // TC --> O(n^2) SC --> O(n)
        int dp[] = new int[nums.length];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[dp.length-1]=0;

        for(int i=dp.length-2;i>=0;i--)
        {
            int min=Integer.MAX_VALUE;
            for(int j=i+1;j<=Math.min(dp.length-1,i+nums[i]);j++)
            {
                min = Math.min(min,dp[j]);
            }
            if(min !=Integer.MAX_VALUE)
            {
                dp[i] = min+1;
            }
        }
        return dp[0];
        */

        /*
        int totalJumps=0, destination=nums.length-1;
        int coverage=0, lastJumpIndex=0 ;
        
        if(nums.length==1) return 0;
        for(int i=0;i<nums.length;i++)
        {
            coverage = Math.max(coverage, i+nums[i]);
            if(i == lastJumpIndex)
            {
                lastJumpIndex = coverage;
                totalJumps++;

                if(coverage >= destination)
                {
                    return totalJumps;
                }
            }
        }
        return totalJumps;
        */

        //TC --> O(n) Sc--> O(1)
        int begin=0, end=0, farthest=0;
        int jump=0;

        for(int i=0;i<nums.length-1;i++)
        {
            farthest = Math.max(farthest,i+nums[i]);
            if(i==end)
            {
                jump++;
                end=farthest;
            }
        }
        return jump;
    }
	public static void main(String[] args) 
	{
		int arr[]={2,3,1,1,4};
		System.out.println("Output : "+jump(arr));
	}
}
