/*
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
  Input: nums = [1,2,3,4]
  Output: [24,12,8,6]
Example 2:
  Input: nums = [-1,1,0,-3,3]
  Output: [0,0,9,0,0]
*/

//Brute Force
import java.util.*;
public class Main
{
    public static int[] productExceptSelf(int[] nums) 
    {
        int ans[]=new int[nums.length],f;
        for(int i=0;i<nums.length;i++)
        {
            f=1;
            for(int j=0;j<nums.length;j++)
            {
                if(i!=j)
                {
                    f *= nums[j];
                }
            }
            ans[i]=f;
        }
        return ans;
    }
	public static void main(String[] args) 
	{
	    int A[]={1,2,3,4};
	    int ans[];
	    ans = productExceptSelf(A);
	    
	    System.out.println(Arrays.toString(ans));
	}
}

//Approach2
import java.util.*;
public class Main
{
    public static int[] productExceptSelf(int[] nums) 
    {
        int n = nums.length;
        int ans[] = new int[n];
        int pro = 1;
        for(int i : nums) {
            pro *= i;
        }
        
        for(int i = 0; i < n; i++) {
            ans[i] = pro / nums[i];
        }
        return ans;
    }
	public static void main(String[] args) 
	{
	    int A[]={1,2,3,4};
	    int ans[];
	    ans = productExceptSelf(A);
	    
	    System.out.println(Arrays.toString(ans));
	}
}


//Approach 3

