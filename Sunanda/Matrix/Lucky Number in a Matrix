/*
Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.
Example 1:
  Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
  Output: [15]
  Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:
  Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
  Output: [12]
  Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:
  Input: matrix = [[7,8],[1,2]]
  Output: [7]
  Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
*/

import java.util.*;
public class Main
{
    public static List<Integer> luckyNumbers (int[][] matrix) 
    {
        List<Integer> list = new ArrayList<>();
        int min, col;
        for(int i=0;i<matrix.length;i++)
        {
            min = Integer.MAX_VALUE;
            col = 0;
            for(int j=0;j<matrix[i].length;j++)
            {
                if(min > matrix[i][j])
                {
                    min = matrix[i][j];
                    col = j;
                }
            }
            boolean b = true;
            for(int k=0;k<matrix.length;k++)
            {
                if(matrix[i][col] < matrix[k][col])
                {
                    b = false;
                    break;
                }
            }
            if(b)
            {
                list.add(matrix[i][col]);
            }
        }    
        return list;
    }
    
	public static void main(String[] args) 
	{
	    int arr[][]={{3,7,8},{9,11,13},{15,16,17}};
		List<Integer> l = luckyNumbers(arr);
		System.out.println("Output : "+l);
	}
}
